# 문제
# 웅찬이는 과제가 많다.
# 하루에 한 과제를 끝낼 수 있는데, 과제마다 마감일이 있으므로 모든 과제를 끝내지 못할 수도 있다.
# 과제마다 끝냈을 때 얻을 수 있는 점수가 있는데, 마감일이 지난 과제는 점수를 받을 수 없다.
# 웅찬이는 가장 점수를 많이 받을 수 있도록 과제를 수행하고 싶다.
# 웅찬이를 도와 얻을 수 있는 점수의 최댓값을 구하시오.

# 입력
# 첫 줄에 정수 N (1 ≤ N ≤ 1,000)이 주어진다.
# 다음 줄부터 N개의 줄에는 각각 두 정수 d (1 ≤ d ≤ 1,000)와 w (1 ≤ w ≤ 100)가 주어진다.
# d는 과제 마감일까지 남은 일수를 의미하며, w는 과제의 점수를 의미한다.

# 출력
# 얻을 수 있는 점수의 최댓값을 출력한다.

# 예제 입력 1
# 7
# 4 60
# 4 40
# 1 20
# 2 50
# 3 30
# 4 10
# 6 5

# 예제 출력 1
# 185

# 힌트
# 예제에서 다섯 번째, 네 번째, 두 번째, 첫 번째, 일곱 번째 과제 순으로 수행하고,
# 세 번째, 여섯 번째 과제를 포기하면 185점을 얻을 수 있다.
import sys

input = sys.stdin.readline

tasks = [list(map(int, input().split())) for _ in range(int(input()))]
tasks.sort(key=lambda x: x[1], reverse=True)
# 구하고자하는 것을 정렬의 기준으로 삼자: 누적과제점수의 최대화 => 과제점수 내림차순 정렬
# 삽입,삭제가 계속 일어나는게 아니면 heapq보다 정렬 한번하고 인덱스로 조회하는게 낫다
assigned = [False] * 1001

total_score = 0
for due, score in tasks:
    while due > 0 and assigned[due]:
        # 그리디
        # 1) 최대한 가중치가 높은 것부터 배치
        # 2) 배치가능하면 최대한 마감일에 가깝게 배치 = 후순위 과제들에게 가용일자를 최대화 시켜줌
        due -= 1
    if due > 0:
        assigned[due] = True
        total_score += score

print(total_score)
