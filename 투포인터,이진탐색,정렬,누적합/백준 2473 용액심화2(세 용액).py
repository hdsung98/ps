# 문제

# 각 용액에는 그 용액의 특성을 나타내는 하나의 정수가 주어져있다.
# 산성 용액의 특성값은 1부터 1,000,000,000까지의 양의 정수로 나타내고,
# 알칼리성 용액의 특성값은 -1부터 -1,000,000,000까지의 음의 정수로 나타낸다.
# 같은 양의 두 용액을 혼합한 용액의 특성값은 혼합에 사용된 각 용액의 특성값의 합으로 정의한다.
# 같은 양의 두 용액을 혼합하여 특성값이 0에 가장 가까운 용액을 만들려고 한다.
#
# 예를 들어, 주어진 용액들의 특성값이 [-2, 6, -97, -6, 98]인 경우에는
# 특성값이 -97와 -2인 용액과 특성값이 98인 용액을 혼합하면 특성값이 -1인 용액을 만들 수 있고,
# 이 용액이 특성값이 0에 가장 가까운 용액이다.
# 참고로, 두 종류의 알칼리성 용액만으로나 혹은 두 종류의 산성 용액만으로 특성값이 0에 가장 가까운 혼합 용액을 만드는 경우도 존재할 수 있다.
#
# 산성 용액과 알칼리성 용액의 특성값이 주어졌을 때,
# 이 중 두 개의 서로 다른 용액을 혼합하여 특성값이 0에 가장 가까운 용액을 만들어내는 두 용액을 찾는 프로그램을 작성하시오.

# 입력
# 첫째 줄에는 전체 용액의 수 N이 입력된다. N은 3 이상 5,000 이하의 정수이다.
# 둘째 줄에는 용액의 특성값을 나타내는 N개의 정수가 빈칸을 사이에 두고 주어진다.
# 이 수들은 모두 -1,000,000,000 이상 1,000,000,000 이하이다.
# N개의 용액들의 특성값은 모두 다르고, 산성 용액만으로나 알칼리성 용액만으로 입력이 주어지는 경우도 있을 수 있다.

# 출력
# 첫째 줄에 특성값이 0에 가장 가까운 용액을 만들어내는 세 용액의 특성값을 출력한다.
# 출력해야 하는 세 용액은 특성값의 오름차순으로 출력한다.
# 특성값이 0에 가장 가까운 용액을 만들어내는 경우가 두 개 이상일 경우에는 그 중 아무것이나 하나를 출력한다.

# 예제 입력 1
# 5
# -2 6 -97 -6 98
# 예제 출력 1
# -97 -2 98




# 이전 두 유형과 차이점: "세 가지" 수를 조합해 0에 가장 근접한 경우를 특정 해내야함

# 이 문제 접근할 때 나의 실수: 양 끝점을 고정 시켜놓고 중간 값을 이동시키며 찾으려함(매 양끝점 조합마다 O(N) 소요=>투포인터 의미가 없음)

# 올바른 접근: 고정 값 하나를 픽스하고 남은 범위에서 이분 탐색을 진행.
# => 이 접근의 의미: 0에 가장 가까운 두 수 조합을 구하려는 문제를 "-픽스값"에 가장 가까운 두 수 조합 찾기로 변경
# (투포인터 시스템을 유지할 수 있게됨)

liquid_num = int(input())
liquids = list(map(int, input().split()))
liquids.sort()

min_gap, min_comb = float('inf'), []
for fix in range(liquid_num - 2):
    start, end = fix + 1, liquid_num - 1

    while start < end:
        cur = liquids[fix] + liquids[start] + liquids[end]
        if abs(cur) < min_gap:
            min_gap = abs(cur)
            min_comb = [liquids[fix], liquids[start], liquids[end]]
        if cur > 0:
            end -= 1
        else:
            start += 1

print(' '.join(map(str, min_comb)))
