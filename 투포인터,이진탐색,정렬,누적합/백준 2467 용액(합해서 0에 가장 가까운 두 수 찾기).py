# 문제

# 각 용액에는 그 용액의 특성을 나타내는 하나의 정수가 주어져있다.
# 산성 용액의 특성값은 1부터 1,000,000,000까지의 양의 정수로 나타내고,
# 알칼리성 용액의 특성값은 -1부터 -1,000,000,000까지의 음의 정수로 나타낸다.
# 같은 양의 두 용액을 혼합한 용액의 특성값은 혼합에 사용된 각 용액의 특성값의 합으로 정의한다.
# 같은 양의 두 용액을 혼합하여 특성값이 0에 가장 가까운 용액을 만들려고 한다.
#
# 예를 들어, 주어진 용액들의 특성값이 [-2, 4, -99, -1, 98]인 경우에는
# 특성값이 -99인 용액과 특성값이 98인 용액을 혼합하면 특성값이 -1인 용액을 만들 수 있고,
# 이 용액이 특성값이 0에 가장 가까운 용액이다.
# 참고로, 두 종류의 알칼리성 용액만으로나 혹은 두 종류의 산성 용액만으로 특성값이 0에 가장 가까운 혼합 용액을 만드는 경우도 존재할 수 있다.
#
# 산성 용액과 알칼리성 용액의 특성값이 주어졌을 때,
# 이 중 두 개의 서로 다른 용액을 혼합하여 특성값이 0에 가장 가까운 용액을 만들어내는 두 용액을 찾는 프로그램을 작성하시오.

# 입력
# 첫째 줄에는 전체 용액의 수 N이 입력된다. N은 2 이상 100,000 이하이다.
# 둘째 줄에는 용액의 특성값을 나타내는 N개의 정수가 빈칸을 사이에 두고 "오름차순으로 입력되며".
# 이 수들은 모두 -1,000,000,000 이상 1,000,000,000 이하이다.
# N개의 용액들의 특성값은 모두 다르고, 산성 용액만으로나 알칼리성 용액만으로 입력이 주어지는 경우도 있을 수 있다.

# 출력
# 첫째 줄에 특성값이 0에 가장 가까운 용액을 만들어내는 두 용액의 특성값을 출력한다.
# 출력해야 하는 두 용액은 특성값의 오름차순으로 출력한다.
# 특성값이 0에 가장 가까운 용액을 만들어내는 경우가 두 개 이상일 경우에는 그 중 아무것이나 하나를 출력한다.

# 예제 입력 1
# 5
# -2 4 -99 -1 98
# 예제 출력 1
# -99 98

liquid_num = int(input())
liquids = list(map(int, input().split()))

best_result, best_pair = float('inf'), [0, 0]
left, right = 0, liquid_num - 1  # 수열 내 조합의 모든 경우의 수를 찾는게 아니라(브루트 포스),
                                 # "특정 값,범위에 수렴"하는 "최적의 경우 하나"를 콕 집어내는 유형은 "정렬 + 투포인터"가 적절

while left < right:
    cur_result = liquids[left] + liquids[right]
    if abs(cur_result) < best_result:
        best_result = abs(cur_result)
        best_pair = [liquids[left], liquids[right]]

    if cur_result < 0:
        left += 1
    elif cur_result > 0:
        right -= 1
    else:
        break

print(best_pair[0], best_pair[1])
